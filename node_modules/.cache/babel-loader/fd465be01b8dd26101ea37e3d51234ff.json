{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async function () {\n    let append = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      } //Modified reponse to append the data together\n\n\n      const newTransactions = response.data;\n      const oldTransactions = previousResponse.data;\n      const updatedTransactions = append ? [...oldTransactions, ...newTransactions] : newTransactions;\n      return {\n        data: updatedTransactions,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  const hasLoadedAllPages = paginatedTransactions !== null && paginatedTransactions.nextPage === null;\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    hasLoadedAllPages\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","append","response","page","nextPage","previousResponse","newTransactions","data","oldTransactions","updatedTransactions","invalidateData","hasLoadedAllPages"],"sources":["C:/Users/Phoenix/Documents/RampFEI_bugs/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\r\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\r\n\r\nimport { useCustomFetch } from \"./useCustomFetch\"\r\n\r\nexport interface PaginatedTransactionsResult {\r\n  data: PaginatedResponse<Transaction[]> | null\r\n  loading: boolean\r\n  fetchAll: (append?: boolean) => Promise<void>\r\n  invalidateData: () => void\r\n  hasLoadedAllPages: boolean\r\n}\r\n\r\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\r\n  const { fetchWithCache, loading } = useCustomFetch()\r\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\r\n    Transaction[]\r\n  > | null>(null)\r\n\r\n  const fetchAll = useCallback(async (append = true) => {\r\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\r\n      \"paginatedTransactions\",\r\n      {\r\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\r\n      }\r\n    )\r\n\r\n    setPaginatedTransactions((previousResponse) => {\r\n      if (response === null || previousResponse === null) {\r\n        return response\r\n      }\r\n      //Modified reponse to append the data together\r\n      const newTransactions = response.data\r\n      const oldTransactions = previousResponse.data\r\n\r\n      const updatedTransactions = append ? [...oldTransactions,...newTransactions] : newTransactions\r\n\r\n      return { data: updatedTransactions, nextPage: response.nextPage }\r\n    })\r\n  }, [fetchWithCache, paginatedTransactions])\r\n\r\n  const invalidateData = useCallback(() => {\r\n    setPaginatedTransactions(null)\r\n  }, [])\r\n\r\n  const hasLoadedAllPages = paginatedTransactions !== null && paginatedTransactions.nextPage === null\r\n\r\n\r\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, hasLoadedAllPages } }\r\n\r\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAUA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,kBAAyB;IAAA,IAAlBS,MAAkB,uEAAT,IAAS;IACpD,MAAMC,QAAQ,GAAG,MAAMN,cAAc,CACnC,uBADmC,EAEnC;MACEO,IAAI,EAAEL,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACM;IADnE,CAFmC,CAArC;IAOAL,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD,CAH4C,CAI7C;;;MACA,MAAMI,eAAe,GAAGJ,QAAQ,CAACK,IAAjC;MACA,MAAMC,eAAe,GAAGH,gBAAgB,CAACE,IAAzC;MAEA,MAAME,mBAAmB,GAAGR,MAAM,GAAG,CAAC,GAAGO,eAAJ,EAAoB,GAAGF,eAAvB,CAAH,GAA6CA,eAA/E;MAEA,OAAO;QAAEC,IAAI,EAAEE,mBAAR;QAA6BL,QAAQ,EAAEF,QAAQ,CAACE;MAAhD,CAAP;IACD,CAXuB,CAAxB;EAYD,CApB2B,EAoBzB,CAACR,cAAD,EAAiBE,qBAAjB,CApByB,CAA5B;EAsBA,MAAMY,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,MAAMY,iBAAiB,GAAGb,qBAAqB,KAAK,IAA1B,IAAkCA,qBAAqB,CAACM,QAAtB,KAAmC,IAA/F;EAGA,OAAO;IAAEG,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDU,cAAlD;IAAkEC;EAAlE,CAAP;AAA8F;;GAnChFhB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}